% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/split_by_event_times.R
\name{split_by_event_times}
\alias{split_by_event_times}
\title{Split all follow-up intervals at each occurence of an event}
\usage{
split_by_event_times(
  x,
  interval_vars,
  id_var,
  event_indicator,
  group_vars = NULL
)
}
\arguments{
\item{x}{is a data.table}

\item{interval_vars}{length 2 character vector designating two column names in x:
the first element of interval_vars designates the start time for follow-up (if using study time, create a column of zeros)
the second element of interval_vars designates the start time for follow-up (ie censor or event date)}

\item{id_var}{a character vector designating a column name in x that identifies a row identifier that will be included in the final output}

\item{event_indicator}{character vector designating a column name in x that is of 0/1 indicator variable for events}

\item{group_vars}{optionally,  groups_vars designates column name(s) in x in which the splitting algorithm will be repeated separately.
(e.g. if you have different outcomes you can do this computation separately for each outcome with a single function
call assuming that your dataset is formatted "long" with respect to outcome type (each particpant has one row per outcome type))}

\item{y}{A two-column data.frame where the first column is the start IDate (or integer) of each period and the second
column is the ending IDate (or integer) of each period. The intervals must be non-overlapping and comprehensive.}
}
\value{
returns an unkeyed data.table with columns of x plus two columns: start and end. the event_indicator
column will be equal to 1 only in a ppt's final interval (and only if that ppt had an event)
}
\description{
Take a set of follow-up times represented as start/stop intervals and split each interval
at every occurance of an event so that time-varying variables can be merged in.
}
\details{
The returned format where each participant has multiple rows each corresponding to
a non-overlapping interval of follow-up is sometimes known as the Andersen Gill formulation
of the Cox model. While the term "Andersen Gill" is more often used in the context of recurring events
this function was written not to deal with recurrent events but rather to facilitate merging
time-varying data into the analysis dataset more flexibly than allowed by the survival package.
As such, this funciton is untested for recurrent events so I've written stop() if it detects
recurrent events. It may be possible to modify the code to deal with recurrent events and time-varying
data, but this is not something I need so I've not considered that possiblity.

Rather, the focus here is to deal with time-varying variables. The functions in the survival
package for dealing with time-varying variables are designed to deal with time-varying covariates
which change at a limited set of discrete time-points. This is the sort of data that's typical
in a prospective cohort study with multiple visits (ie, you collect blood pressure at the baseline visit
and at a small number of specific subsequent dates). It seems like the survival function was not designed
to deal with time-varying data which is changing constantly (as in the case of air pollution exposure).
Even when dealing with long-term averages, say a 2 year average prior to a given day, that running
2 year average changes every day.  In my testing, attempting to provide the function in the survival package that
deals with time-varying data a dataset containing every two-year average (corresponding to every day of follow-up)
for every participant in a cohort leads to a crash. My guess is that the function is attempting
to split every individual's follow-up time at every day resulting in a large dataset that leads to
an out-of-memory error crash.

However, even if exposure changes at every discrete time point in a survival dataset for every participant,
cutting everyone's follow-up time at every time point is unnecessary. For the purpose of accurate
cox estimation, it is only strictly necessary to cut follow-up intervals at the occurance of an event--
any event of the same type by any indivual in the cohort.

(Actually, technically,
if you're stratifying the cox model by a categorical covariate, it's probably only necessary to
split the follow-up times of individuals only by the dates of events of other individuals in the same strata.
but due to the fact that this would require a different analytic formulation of the dataset for different
models stratified by different variables, this approach probably isn't worth it unless you encounter
extreme computational problems.)

In any case, I've written this function to break up follow-up intervals at the date of every
other event in the dataset.

Additionally, since when we're doing events analyses we're often considering multiple different types of
events (each of which has their own set of event dates), this function has been written to simultaneously
handle multiple event types in one function call via specification of a categorical variable
(defining event types) in the group_vars argument. (Come to think of it, you could probably also put a
categorical variable defining strata as discussed above in the group_vars variable.
But you'd be careful in that you'd always need to stratify by that variable when fitting the cox model)
}
