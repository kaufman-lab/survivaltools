% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/generate_random_curve.R
\name{generate_random_curve_function}
\alias{generate_random_curve_function}
\title{to increase the flexibility of the curve, you need to specify higher n_points and degee.}
\usage{
generate_random_curve_function(
  ppts,
  x_domain,
  random_trends,
  intercept = 0L,
  linear_slope = 0L,
  random_spline_coefs = NULL,
  n_points = NULL,
  random_points_expr = NULL,
  degree = NULL
)
}
\arguments{
\item{ppts}{NULL, or a unique vector identifying participant numbers.}

\item{x_domain}{A length-2 numeric vector specifying the inclusive interval over which the
curve should be defined.}

\item{random_trends}{Number of random temporal trends to generate
(in addition to the always-present constant and linear terms). Specify 0 for no random trends.}

\item{intercept}{The coefficient(s) for the constant trend. A vector either length of ppts or length-1.}

\item{linear_slope}{The coefficient(s) for the linear trend of centered x.
A vector either length of ppts or length-1.}

\item{random_spline_coefs}{Coefficient(s) for the random splines. A list with the length of the number of
random trends specified via random_trends.
Each element of this list can either be length-1 or the length of ppts.}

\item{n_points}{For the random splines, the number of points (not including end points) that will be
used to generate the spline.
Can be either length-1 (the same number of points will be used for all random_splines) or
the length of the number of random trends specified via, specifying that each random spline will be generated
from a different number of points.}

\item{degree}{The degee for the random splines.
Passed to bs function.}
}
\value{
if ppts is NULL, a function of x. if ppts is non-null, a function of ppts and x.
Either way the return function will return a data.table with columns: x, pred, and possibly ppts
}
\description{
to increase the flexibility of the curve, you need to specify higher n_points and degee.
}
\details{
The random splines will have an expected value of 0 at all points. The returned curve will also
have an expected value of <intercept> at all points, unless you specify linear_slope to be non-zero,
in which case the curve will have an expected value of zero only at the midpoint of the domain (since
linear_slope is the slope of centered x)
}
\examples{

z(ppts,x=1:(365*20))

par(mfrow=c(3,2))
for(j in 1:3){
  z <- generate_random_curve_function(ppts,x_domain=c(1,365.25*20),random_trends=2,
                                      intercept=rnorm(length(ppts),mean=18),
                                      linear_slope=rnorm(length(ppts),-0.0009,sd=0.0001),
                                      random_spline_coefs=list(
                                        rnorm(length(ppts),sd=.4),
                                        rnorm(length(ppts),sd=.4)
                                      ),
                                      n_points=365,
                                      random_points_expr=rnorm(n,mean=0,sd=20),
                                      degree=30)
  x <- 1:(365*20)
  exposures <- z(ppts,x=x)
  for(i in 1:length(ppts)){
    if(i==1){
      exposures[J(ppts[i]), plot(x=x,y=pred,type="l",col=i,ylim=c(0,30)),on="ppt"]
    }
    else{
      exposures[J(ppts[i]), lines(x=x,y=pred,col=i,ylim=c(0,30)),on="ppt"]
    }
  }

}
par(mfrow=c(1,1))



max(5, floor(365*20)*.05)
shape <- 7.5
avg_daily_hazard=0.000003
curve(dgamma(x,shape=shape,scale=avg_daily_hazard/shape),from=0, to=0.0001)

z2 <- generate_random_curve_function(ppts=NULL,x_domain=c(1,20),random_trends=1,
                                     intercept=0,
                                     linear_slope=-0.00000009,
                                     random_spline_coefs=1L,
                                     n_points=20,
                                     random_points_expr=rgamma(n,shape=shape,scale=avg_daily_hazard/shape),
                                     degree=10)

z2(x=1:4)


}
